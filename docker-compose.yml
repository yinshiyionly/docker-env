version: "3.1"
services:
  openresty:
    image: ${OPENRESTY_IMAGE}
    container_name: ${OPENRESTY_CONTAINER_NAME}
    ports:
      - ${OPENRESTY_PORT1}
      - ${OPENRESTY_PORT2}
      - ${OPENRESTY_PORT_SEGMENT}
    volumes:
      - ${WEB_PATH}:/www
      - ./app/openresty/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ./app/openresty/conf.d:/etc/nginx/conf.d
      - ./log/openresty:/usr/local/openresty/nginx/logs
      - ${LOCALTIME_VOLUMES}
      - ${TIMEZONE_VOLUMES}
    restart: unless-stopped
    network_mode: "host"
  php74:
    image: ${PHP74_IMAGE}
    container_name: ${PHP74_CONTAINER_NAME}
    expose:
      - ${PHP74_EXPOSE}
    volumes:
      - ${WEB_PATH}:/www
      - ./app/php/74/etc:/usr/local/etc
      - ./log/php/74:/var/log/php7
      - ${LOCALTIME_VOLUMES}
      - ${TIMEZONE_VOLUMES}
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    networks:
      - default
  mysql80:
    image: ${MYSQL80_IMAGE}
    privileged: true
    container_name: ${MYSQL80_CONTAINER_NAME}
    restart: unless-stopped
    volumes:
      - ./data/mysql/80:/var/lib/mysql
      - ./app/mysql/80/conf.d:/etc/mysql/conf.d
      - ./app/mysql/80/my.cnf:/etc/my.cnf
      - ./log/mysql/80:/logs
      - ${LOCALTIME_VOLUMES}
      - ${TIMEZONE_VOLUMES}
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    environment:
        MYSQL_ROOT_PASSWORD: awX5pgjY1Lmgyo6X
        MYSQL_USER: docker
        MYSQL_PASSWORD: awX5pgjY1Lmgyo6X
        MYSQL_INITDB_SKIP_TZINFO: Asia/Shanghai
    ports:
        - ${MYSQL80_PORT}
    networks:
      - default
  redis62:
    image: ${REDIS62_IMAGE}
    container_name: ${REDIS62_CONTAINER_NAME}
    ports:
      - ${REDIS62_PORT}
    volumes:
      - ./app/redis/conf/redis.conf:/redis-stack.conf
      - ./app/redis/entrypoint.sh:/entrypoint.sh
      - ./data/redis:/data
      - ${LOCALTIME_VOLUMES}
      - ${TIMEZONE_VOLUMES}
    restart: unless-stopped
    entrypoint: [ "bash", "entrypoint.sh" ]
    environment:
      - REDIS_ARGS=--requirepass 123456!
    networks:
      - default
  rabbitmq:
    image: ${RABBITMQ_IMAGE}
    container_name: ${RABBITMQ_CONTAINER_NAME}
    # 授权 administrator
    # rabbitmqctl set_user_tags ${USER} administrator
    environment:
      - TZ=Asia/Shanghai
      - RABBITMQ_DEFAULT_USER=docker
      - RABBITMQ_DEFAULT_PASS=dockerrabbitmq
    # Web 管理页面端口: 15672
    # 开启: rabbitmq-plugins enable rabbitmq_management
    ports:
      - ${RABBITMQ_PORT1}
      - ${RABBITMQ_PORT2}
    volumes:
      - ./app/rabbitmq/conf.d:/etc/rabbitmq/conf.d
      - ./app/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./data/rabbitmq:/var/lib/rabbitmq
      - ./log/rabbitmq:/var/log/rabbitmq
    restart: unless-stopped
  mongo:
    image: ${MONGO_IMAGE}
    container_name: ${MONGO_CONTAINER_NAME}
    volumes:
      - ./data/mongo:/data/db
      - ./app/mongo/conf/mongod.conf:/etc/mongod.conf
    command:
      --config /etc/mongod.conf
    ports:
      - ${MONGO_PORT}
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=docker
      - MONGO_INITDB_ROOT_PASSWORD=dockermongo
    networks:
      - default
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${LOCALTIME_VOLUMES}
      - ${TIMEZONE_VOLUMES}
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
    ports:
      - "9001:9000"
    networks:
      - default
networks:
  default:
    driver: host
